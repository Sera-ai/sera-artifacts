name: Deploy Release Artifacts

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Ensure the token has the correct permissions

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Specify the Node.js version you need

    - name: Install dependencies
      run: npm install

    - name: Read version from package.json
      id: read_version
      run: |
        VERSION=$(node -p -e "require('./package.json').version")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Package node_modules contents
      run: tar -czf node_modules.tar.gz -C node_modules .

    - name: Upload node_modules artifact
      uses: actions/upload-artifact@v3
      with:
        name: node_modules
        path: node_modules.tar.gz

    - name: Package Lua Scripts contents
      run: tar -czf lua-scripts.tar.gz -C sera-nginx .

    - name: Upload lua-scripts artifact
      uses: actions/upload-artifact@v3
      with:
        name: lua-scripts
        path: lua-scripts.tar.gz

    - name: Package mongodb-models contents
      run: tar -czf mongodb-models.tar.gz -C sera-mongodb .

    - name: Upload mongodb-models artifact
      uses: actions/upload-artifact@v3
      with:
        name: mongodb-models
        path: mongodb-models.tar.gz

    - name: Merge YAML files
      run: |
        cd sera-k8s/deploy
        echo "Merging YAML files..."
        MERGED_YAML="sera-deployment-single.yaml"
        > $MERGED_YAML  # Create an empty merged.yaml file
        for file in *.yaml; do
          if [ "$file" != "$MERGED_YAML" ]; then
            cat $file >> $MERGED_YAML
            echo "---" >> $MERGED_YAML
          fi
        done
        echo "Merged YAML files into $MERGED_YAML"

    - name: Create or Update Release 
      id: create_update_release
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.WORKFLOW_TOKEN }}
        script: |
          const version = process.env.VERSION;
          const tagName = `v${version}`;
          const releaseName = `Release ${version}`;
          const commitSha = context.sha;

          let release;
          try {
            // Check if the release already exists
            release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tagName
            });

            // If release exists, update it
            release = await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.data.id,
              tag_name: tagName,
              target_commitish: commitSha,
              name: releaseName,
              body: 'Auto-generated release from GitHub Actions',
              draft: false,
              prerelease: false
            });
          } catch (error) {
            if (error.status === 404) {
              // If release does not exist, create a new one
              release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: tagName,
                target_commitish: commitSha,
                name: releaseName,
                body: 'Auto-generated release from GitHub Actions',
                draft: false,
                prerelease: false
              });
            } else {
              throw error;
            }
          }

          core.setOutput('release_id', release.data.id);
          core.setOutput('upload_url', release.data.upload_url);

    - name: Set Release ID
      run: echo "RELEASE_ID=${{ steps.create_update_release.outputs.release_id }}" >> $GITHUB_ENV

    - name: Delete All Existing Assets
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.WORKFLOW_TOKEN }}
        script: |
          const releaseId = process.env.RELEASE_ID;
          const assets = await github.rest.repos.listReleaseAssets({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId
          });

          for (const asset of assets.data) {
            await github.rest.repos.deleteReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              asset_id: asset.id
            });
          }

    - name: Upload Node Modules to Release
      uses: tanyagray/action-upload-release-asset@v1.1.3
      env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.upload_url }}
        asset_path: ./node_modules.tar.gz
        asset_name: node_modules.tar.gz
        asset_content_type: application/gzip

    - name: Upload Lua Scripts to Release
      uses: tanyagray/action-upload-release-asset@v1.1.3
      env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.upload_url }}
        asset_path: ./lua-scripts.tar.gz
        asset_name: lua-scripts.tar.gz
        asset_content_type: application/gzip

    - name: Upload MongoDB Models to Release
      uses: tanyagray/action-upload-release-asset@v1.1.3
      env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.upload_url }}
        asset_path: ./mongodb-models.tar.gz
        asset_name: mongodb-models.tar.gz
        asset_content_type: application/gzip

    - name: Upload Deployment YAML to Release
      uses: tanyagray/action-upload-release-asset@v1.1.3
      env:
          GITHUB_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      with:
        upload_url: ${{ steps.create_update_release.outputs.upload_url }}
        asset_path: sera-k8s/deploy/sera-deployment-single.yaml
        asset_name: sera-deployment-single.yaml
        asset_content_type: application/yaml
